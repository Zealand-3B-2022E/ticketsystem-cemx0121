<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TicketSystemClassLibrary</name>
    </assembly>
    <members>
        <member name="T:TicketSystemClassLibrary.Car">
            <summary>
            A Car class which inherit from the base class Vehicle. The two abstract methods from the base class is implemented for this specific class.
            </summary>
        </member>
        <member name="T:TicketSystemClassLibrary.MC">
            <summary>
            A MC class which inherit from the base class Vehicle. The two abstract methods from the base class is implemented for this specific class.
            </summary>
        </member>
        <member name="T:TicketSystemClassLibrary.Vehicle">
            <summary>
            An abstract class Vehicle with two properties and two methods. Derived classes can inherit from this class and implement the abstract methods as needed. 
            </summary>
        </member>
        <member name="M:TicketSystemClassLibrary.Vehicle.Price">
            <summary>
            An abstract method which returns the fixed price for the vehicle as a double
            </summary>
            <returns>Fixed price as a double</returns>
        </member>
        <member name="M:TicketSystemClassLibrary.Vehicle.VehicleType">
            <summary>
            An abstract method which returns the type of vehicle as a string. 
            </summary>
            <returns>Vehicle-type as a string</returns>
        </member>
        <member name="M:TicketSystemClassLibrary.Vehicle.CheckLicensePlateIsValid(System.String)">
            <summary>
            A private method that checks if the value trying to be set to LicensePlate property is valid, if not an appropiate exception is thrown.
            </summary>
            <param name="licenseplate">The value trying to be set to Licenseplate property</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the value is null, empty og empty spaces</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is thrown if the value is above 7 characters</exception>
        </member>
    </members>
</doc>
